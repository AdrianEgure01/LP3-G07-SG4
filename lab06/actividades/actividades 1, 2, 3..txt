package Modelo;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class PedidoModelo {
    private List<Pedido> pedidos;
    private List<Pedido> historial; // Historial de pedidos completados o eliminados

    public PedidoModelo() {
        pedidos = new ArrayList<>();
        historial = new ArrayList<>();
    }

    public void agregarPedido(Pedido pedido) {
        pedidos.add(pedido);
    }

    public List<Pedido> getPedidos() {
        return pedidos;
    }

    // Marcar pedido como completo
    public boolean marcarPedidoComoCompleto(String nombrePlato) {
        for (Pedido pedido : pedidos) {
            if (pedido.getNombrePlato().equalsIgnoreCase(nombrePlato) && pedido.isPendiente()) {
                pedido.setEstado("Completo");
                historial.add(pedido);
                return true;
            }
        }
        return false;
    }

    // Mostrar pedidos por estado
    public List<Pedido> obtenerPedidosPorEstado(String estado) {
        return pedidos.stream()
                .filter(p -> p.getEstado().equalsIgnoreCase(estado))
                .collect(Collectors.toList());
    }

    // Contar pedidos pendientes
    public long contarPedidosPendientes() {
        return pedidos.stream().filter(Pedido::isPendiente).count();
    }

    // Eliminar pedido (marcar como "Eliminado")
    public boolean eliminarPedido(String nombrePlato) {
        for (Pedido pedido : pedidos) {
            if (pedido.getNombrePlato().equalsIgnoreCase(nombrePlato) && !pedido.isEliminado()) {
                pedido.setEstado("Eliminado");
                historial.add(pedido);
                return true;
            }
        }
        return false;
    }

    // Obtener historial de pedidos completados o eliminados
    public List<Pedido> obtenerHistorial() {
        return historial;
    }
}

package Modelo;

public class Pedido {
    private String nombrePlato;
    private String tipoPlato;
    private String estado; // "Pendiente", "Completo" o "Eliminado"

    public Pedido(String nombrePlato, String tipoPlato) {
        this.nombrePlato = nombrePlato;
        this.tipoPlato = tipoPlato;
        this.estado = "Pendiente"; // El estado inicial siempre será "Pendiente"
    }

    public String getNombrePlato() {
        return nombrePlato;
    }

    public void setNombrePlato(String nombrePlato) {
        this.nombrePlato = nombrePlato;
    }

    public String getTipoPlato() {
        return tipoPlato;
    }

    public void setTipoPlato(String tipoPlato) {
        this.tipoPlato = tipoPlato;
    }

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    public boolean isPendiente() {
        return estado.equals("Pendiente");
    }

    public boolean isCompleto() {
        return estado.equals("Completo");
    }

    public boolean isEliminado() {
        return estado.equals("Eliminado");
    }
}

package Controlador;

import java.util.List;
import Modelo.Pedido;
import Modelo.PedidoModelo;
import Vista.PedidoVista;

public class PedidoControlador {
    private PedidoModelo modelo;
    private PedidoVista vista;

    public PedidoControlador(PedidoModelo modelo, PedidoVista vista) {
        this.modelo = modelo;
        this.vista = vista;
    }

    public void agregarPedido(String nombrePlato, String tipoPlato) {
        if (!nombrePlato.isEmpty() && !tipoPlato.isEmpty()) {
            modelo.agregarPedido(new Pedido(nombrePlato, tipoPlato));
            vista.mostrarMensaje("Pedido agregado: " + nombrePlato + " (Tipo: " + tipoPlato + ")");
        } else {
            vista.mostrarMensaje("El nombre y tipo del plato no pueden estar vacíos.");
        }
    }

    public void mostrarPedidos() {
        List<Pedido> pedidos = modelo.getPedidos();
        vista.mostrarPedidos(pedidos);
    }

    public void eliminarPedido(String nombrePlato) {
        if (modelo.eliminarPedido(nombrePlato)) {
            vista.mostrarMensaje("Pedido eliminado: " + nombrePlato);
        } else {
            vista.mostrarMensaje("Pedido no encontrado o ya eliminado.");
        }
    }

    public void actualizarPedido(String nombrePlato, String nuevoNombre, String nuevoTipo) {
        if (modelo.actualizarPedido(nombrePlato, nuevoNombre, nuevoTipo)) {
            vista.mostrarMensaje("Pedido actualizado.");
        } else {
            vista.mostrarMensaje("Pedido no encontrado.");
        }
    }

    public void buscarPedido(String criterio) {
        List<Pedido> pedidos = modelo.buscarPedido(criterio);
        vista.mostrarPedidos(pedidos);
    }

    public void marcarPedidoComoCompleto(String nombrePlato) {
        if (modelo.marcarPedidoComoCompleto(nombrePlato)) {
            vista.mostrarMensaje("Pedido marcado como completo.");
        } else {
            vista.mostrarMensaje("Pedido no encontrado o ya está completo.");
        }
    }

    public void mostrarPedidosPorEstado(String estado) {
        List<Pedido> pedidos = modelo.obtenerPedidosPorEstado(estado);
        vista.mostrarPedidos(pedidos);
    }

    public void contarPedidosPendientes() {
        long pendientes = modelo.contarPedidosPendientes();
        vista.mostrarMensaje("Pedidos pendientes: " + pendientes);
    }

    public void mostrarHistorial() {
        List<Pedido> historial = modelo.obtenerHistorial();
        vista.mostrarPedidos(historial);
    }

    public void iniciar() {
        String opcion;
        do {
            vista.mostrarMenu();
            opcion = vista.solicitarOpcion();
            
            switch (opcion) {
                case "1":
                    String nombrePlato = vista.solicitarNombrePlato();
                    String tipoPlato = vista.solicitarTipoPlato();
                    agregarPedido(nombrePlato, tipoPlato);
                    break;
                case "2":
                    mostrarPedidos();
                    break;
                case "3":
                    nombrePlato = vista.solicitarNombrePlato();
                    eliminarPedido(nombrePlato);
                    break;
                case "4":
                    nombrePlato = vista.solicitarNombrePlato();
                    String nuevoNombre = vista.solicitarNombrePlato();
                    tipoPlato = vista.solicitarTipoPlato();
                    actualizarPedido(nombrePlato, nuevoNombre, tipoPlato);
                    break;
                case "5":
                    String criterio = vista.solicitarNombrePlato();
                    buscarPedido(criterio);
                    break;
                case "6":
                    nombrePlato = vista.solicitarNombrePlato();
                    marcarPedidoComoCompleto(nombrePlato);
                    break;
                case "7":
                    String estado = vista.solicitarEstado();
                    mostrarPedidosPorEstado(estado);
                    break;
                case "8":
                    contarPedidosPendientes();
                    break;
                case "9":
                    mostrarHistorial();
                    break;
                case "10":
                    vista.mostrarMensaje("Saliendo...");
                    break;
                default:
                    vista.mostrarMensaje("Opción inválida, por favor intente de nuevo.");
                    break;
            }
        } while (!opcion.equals("10"));
        
        vista.cerrarScanner();
    }
}

package Vista;

import java.util.List;
import java.util.Scanner;
import Modelo.Pedido;

public class PedidoVista {
    private Scanner scanner;

    public PedidoVista() {
        scanner = new Scanner(System.in);
    }

    public String solicitarNombrePlato() {
        System.out.print("Introduce el nombre del plato: ");
        return scanner.nextLine();
    }

    public String solicitarTipoPlato() {
        System.out.print("Introduce el tipo de plato: ");
        return scanner.nextLine();
    }

    public void mostrarPedidos(List<Pedido> pedidos) {
        if (pedidos.isEmpty()) {
            System.out.println("No hay pedidos en la lista.");
        } else {
            System.out.println("Lista de Pedidos:");
            for (Pedido pedido : pedidos) {
                System.out.println("- " + pedido.getNombrePlato() + " (Tipo: " + pedido.getTipoPlato() + ", Estado: " + pedido.getEstado() + ")");
            }
        }
    }

    public void mostrarMenu() {
        System.out.println("\nOpciones:");
        System.out.println("1. Agregar Pedido");
        System.out.println("2. Mostrar Pedidos");
        System.out.println("3. Eliminar Pedido");
        System.out.println("4. Actualizar Pedido");
        System.out.println("5. Buscar Pedido");
        System.out.println("6. Marcar Pedido como Completo");
        System.out.println("7. Mostrar Pedidos por Estado");
        System.out.println("8. Contar Pedidos Pendientes");
        System.out.println("9. Mostrar Historial de Pedidos");
        System.out.println("10. Salir");
    }

    public String solicitarOpcion() {
        System.out.print("Selecciona una opción: ");
        return scanner.nextLine();
    }

    public String solicitarEstado() {
        System.out.print("Introduce el estado del pedido (Pendiente/Completo/Eliminado): ");
        return scanner.nextLine();
    }

    public void mostrarMensaje(String mensaje) {
        System.out.println(mensaje);
    }

    public void cerrarScanner() {
        scanner.close();
    }
}

package Clase;

import Controlador.PedidoControlador;
import Modelo.PedidoModelo;
import Vista.PedidoVista;

public class Main {
    public static void main(String[] args) {
        PedidoModelo modelo = new PedidoModelo();
        PedidoVista vista = new PedidoVista();
        PedidoControlador controlador = new PedidoControlador(modelo, vista);
        controlador.iniciar();
    }
}
